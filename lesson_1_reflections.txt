. How did viewing a diff between two versions of a file help you see the bug that was introduced?

The command diff -u oldfileversion newfileversion showed me exactly which lines of code were different between the two versions. A plus sign stands for code which was added to the new version, a minus sign indicates that in this line code was removed. Be aware about the order how the command is prompted: in the first place there should be the old file and in the second place the new file.

2. How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

Changes to the code which were made unintentionally could be easily corrected through the use of version control. The comparison of different versions with the help of tools (e.g. diff -u) decreases the time which is needed to find changes. If I'm in coding and I'm trying out a new feature I could easily jump back to the last working version of my application.So, I don't need to copy the working file on myself.

3. What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Commiting manually enables me to commit a new version when I change or add code which is logically connected. The drawback of manually committing is that I shouldn't forget about it.

4.Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Git was made especially for programming and in there you've a lot of files which interact among each other. 

5. How can you use the commands git log and git diff to view the history of files?

...

6. How might using version control make you more confident to make changes that could break something?

Version controls enables me to simply try things out. If I realize this doesn't work I always can go back to the last working version/commit by typing git checkout + the ID of the desired commit.

7. Now that you have your workspace set up, what do you want to try using Git for?

...

8.
